1. Halaman Wikipedia - Information Technology, serta komponen-komponen dari TI dengan penekanan lebih pada software.
  Teknologi informasi (TI) adalah penggunaan komputer untuk menyimpan, mengambil, mengirimkan, dan memanipulasi data atau informasi. Istilah teknologi informasi dalam pengertian modern pertama kali muncul dalam artikel tahun 1958 yang diterbitkan dalam Harvard Business Review; penulis Harold J. Leavitt dan Thomas L. Whisler. Definisi mereka terdiri dari tiga kategori: teknik pemrosesan, penerapan metode statistik dan matematika untuk pengambilan keputusan, dan simulasi pemikiran tingkat tinggi melalui program komputer.
  Teknologi komputer pertama menggunakan pita berlubang, selembar kertas panjang yang datanya diwakili oleh serangkaian lubang yang sekarang sangat tidak efisien untuk digunakan lagi. Lalu penemuan baru di penyimpanan digital akses-acak pertama yaitu tabung Williams, berdasarkan tabung sinar katoda standar. Bentuk paling awal dari penyimpanan komputer non-volatile adalah drum magnet, ditemukan pada tahun 1932 dan digunakan di Ferranti Mark 1, komputer elektronik tujuan umum pertama yang tersedia secara komersial di dunia.
  Software adalah kumpulan instruksi dan data yang memberi tahu komputer cara kerja. Berbeda dengan perangkat keras fisik, tempat sistem dibangun dan benar-benar melakukan pekerjaannya. Pada tingkat pemrograman terendah, kode yang dapat dieksekusi terdiri dari instruksi bahasa mesin yang didukung oleh prosesor individu — biasanya unit pemrosesan pusat (CPU) atau unit pemrosesan grafis (GPU). Bahasa mesin terdiri dari grup nilai biner yang menandakan instruksi prosesor yang mengubah status komputer. Misalnya, instruksi dapat mengubah nilai yang disimpan di lokasi penyimpanan tertentu di komputer — efek yang tidak dapat diamati secara langsung oleh pengguna. Sebuah instruksi juga dapat memanggil salah satu dari banyak operasi input atau output, misalnya menampilkan beberapa teks pada layar komputer; menyebabkan perubahan status yang seharusnya dapat dilihat oleh pengguna. Prosesor menjalankan instruksi dalam urutan yang diberikan, kecuali jika diinstruksikan untuk "melompat" ke instruksi yang berbeda, atau diinterupsi oleh sistem operasi. 
  
2. Halaman StackExchange tentang perbedaan informatics dengan computer science.
  Berdasarkan halaman tersebut, dapat kita rangkum bahwa Ilmu komputer adalah studi tentang teori, eksperimen, dan teknik yang membentuk dasar untuk desain dan penggunaan komputer.
  Sedangkan Informatika adalah praktik pemrosesan informasi dan rekayasa sistem informasi, dan sebagai bidang akademis. Bidang ini mempertimbangkan interaksi antara manusia dan informasi di samping konstruksi antarmuka, organisasi, teknologi, dan sistem. 
  Dengan penjelasan yang lebih sederhana, Ilmu komputer adalah ilmu yang mempelajari komputer. Informatika adalah ilmu yang mempelajari penggunaan komputer.
  
3. Halaman Wikipedia - Software Development memberikan penjelasan umum tentang aktivitas, model, serta hal-hal lain yang terkait dengan software development. 
  Pengembangan perangkat lunak adalah proses memahami, menentukan, merancang, memprogram, mendokumentasikan, menguji, dan memperbaiki bug yang terlibat dalam pembuatan dan pemeliharaan aplikasi, kerangka kerja, atau komponen perangkat lunak lainnya. 
  Perangkat lunak dapat dikembangkan untuk berbagai tujuan, tiga yang paling umum untuk memenuhi kebutuhan spesifik dari klien / bisnis tertentu (kasus dengan perangkat lunak kustom), untuk memenuhi kebutuhan yang dirasakan dari beberapa pengguna potensial (kasus dengan komersial dan perangkat lunak sumber terbuka), atau untuk penggunaan pribadi (misalnya, ilmuwan dapat membuat perangkat lunak untuk mengotomatiskan tugas biasa). Pengembangan perangkat lunak tertanam, yaitu pengembangan perangkat lunak tertanam, seperti yang digunakan untuk mengontrol produk konsumen, memerlukan proses pengembangan untuk diintegrasikan dengan pengembangan produk fisik yang dikendalikan.
  Secara singkat kegiatan pengembangan perangkat lunak adalah sebagai berikut :
    1) Identifikasi kebutuhan
    2) Proses perencanaan
    3) Mendesain
    4) Implementasi, pengujian dan pendokumentasian
    5) Penerapan dan pemeliharaan
  Adapun role/jabatan dalam dunia industri di pengembagan perangkat lunak adalah sebagai berikut :
    1) Programmer komputer
    2) Konsultasi insinyur perangkat lunak
    3) Pengembangan perangkat lunak lepas pantai
    4) Pengembang perangkat lunak
    5) Insinyur perangkat lunak
    6) Penerbit perangkat lunak, dll.
    
 4. Halaman Wikipedia - Agile Software Development membahas hal yang lebih spesifik dari software development, yaitu salah satu model / metodologi yang digunakan untuk membangun software.
  Agile Software Development adalah sekelompok metode pengembangan perangkat lunak. Kumpulan metode ini juga sering disebut Agile Development Methods. Dasar dari metode ini adalah prinsip pengembangan sistem jangka pendek dengan tingkat adaptasi yang cepat terhadap segala perubahan. Titik utama dari Agile Software Development adalah kerja sama kelompok. Metode-metode yang tergabung dalam agile menitikberatkan kolaborasi antaranggota tim agile. Agile mengacu pada konsep Agile Manifesto yang mulai menjadi tren sejak tahun 1957 lalu. 
  Agile mempunyai 8 tujuan antara lain ;
    1) High-value and working App system
    2) Iterative, incremental, evolutionary
    3) Cost control and value-driven development
    4) High-quality production
    5) Flexible and risk management
    6) Collaboration
    7) Self-organizing and self-managing teams  
  Sedangkan manfaat dari agile antara lain adalah ; meningkatkan produktivitas tim, meningkatkan kualitas perangkat lunak, meningkatkan kepuasan klien, dan menghemat biaya yang dibutuhkan.
  Secara umum, ada enam langkah inti dalam agile. Langkah-langkah tersebut adalah: Perencanaan, Implementasi, Tes perangkat lunak, Dokumentasi, Deployment, dan Pemeliharaan perangkat lunak.
  Dua belas prinsip agile adalah :
  1. Kepuasan klien adalah prioritas utama
  2. Adaptif dengan perubahan untuk menciptakan keuntungan yang kompetitif bagi klien
  3. Menghasilkan perangkat lunak secara rutin dalam jangka waktu yang pendek
  4. Kerja sama tim berlangsung setiap waktu
  5. Mengembangkan proyek individual yang memotivasi
  6. Menggunakan komunikasi secara langsung untuk menyampaikan suatu informasi
  7. Perangkat lunak yang bekerja dengan baik adalah tolok ukur kemajuan
  8. Pengembangan yang berkelanjutan
  9. Proses, teknis dan rancangan yang berkelanjutan
  10. Memaksimalkan sumber daya yang tersedia
  11. Desain, kebutuhan dan rancangan terbaik muncul dari anggota tim
  12. Refleksi berkala tim untuk menyesuaikan dan menyelaraskan cara kerja yang efektif dan efisien  
  
5. Halaman Wikipedia - Scrum membahas tentang salah satu process framework yang termasuk dalam metodologi Agile.
  Scrum adalah kerangka kerja untuk mengembangkan, menyampaikan, dan mempertahankan produk yang kompleks, sementara secara produktif dan kreatif memberikan produk dengan nilai setinggi mungkin. Scrum merupakan salah satu metode rekayasa perangkat lunak dengan menggunakan prinsip-prinsip pendekatan Agile, yang bertumpu pada kekuatan kolaborasi tim, incremental product dan proses iterasi untuk mewujudkan hasil akhir. 
  Teknik Scrum dapat dilakukan di sebuah kepanitiaan ataupun project lain diluar bisnis teknologi informasi. Dalam teknik Scrum terbagi dalam tiga roles, yang pertama adalah Product Owner, Scrum Master dan Develophment/Scurm Team. Product owner bertugas mengatur urusan dengan Stakeholder sedangkan Scrum Master mengurusi bagian internal, di bagian Development Team mengatur urusan teknik pengerjaan project dan pembahasan yag lebih rinci.
  Scrum juga bisa disebut framework untuk manajemen pengembangan software dengan karakteristik cekatan dan bersifat iteratif dan incremental. Scrum mendefinisikan dirinya fleksible, strategi pengembangan yang menyeluruh di mana seluruh team bekerja sebagai satu unit dalam mencapai sebuah gol yang sama. Dalam menjalankan kerjasama antara anggota team, Scrum menekankan lokasi fisik yang sama atau sarana online yang akrab antara semua member, dan juga pertemuan muka dengan muka setiap hari antara semua anggota team.
  5 SCRUM Value yaitu : 1. Openess
                        2. Courage
                        3. Respect
                        4. Focus
                        5. Commitment
  3 Pilar SCRUM
  1) Transparansi : Semua orang yang terlibat pelanggan, CEO, kontributor individual transparan dalam transaksi sehari-hari mereka dengan orang lain. Mereka semua percaya satu sama lain, dan mereka memiliki keberanian untuk saling mengikuti kabar baik serta kabar buruk. Semua orang berusaha dan secara kolektif berkolaborasi untuk tujuan organisasi bersama, dan tidak ada yang memiliki agenda tersembunyi.
  2) Inspeksi : Inspeksi dalam konteks ini oleh semua orang di Tim Scrum. Inspeksi dapat dilakukan untuk produk, proses, aspek orang, praktik, dan peningkatan berkelanjutan.
  3) Adaptasi : Adaptasi dalam konteks ini adalah tentang perbaikan terus-menerus, kemampuan untuk beradaptasi berdasarkan hasil inspeksi. Setiap orang di organisasi harus mengajukan pertanyaan ini secara teratur, Apakah kita lebih baik daripada kemarin? Untuk organisasi berbasis laba, nilainya diwakili dalam bentuk laba.
  Adapun 3 Jenis Role SCRUM antara lain : 1. Product Owner  2. Team Member   3. SCRUM Master
    
6. Halaman Wikipedia - XP membahas tentang salah satu process framework yang termasuk dalam metodologi Agile. 
  Extreme Programming adalah salah satu dari pendekatan agile software development yang paling sering digunakan karena menyederhanakan berbagai tahapan dalam proses pengembangan tersebut sehingga menjadi lebih adaptif dan fleksibel. XP bukan hanya berfokus pada coding tetapi meliputi seluruh area pengembangan perangkat lunak. XP mengambil pendekatan ‘ekstrim’ dalam iterative development. 
  ASPEK DASAR XP TERDIRI DARI BERBAGAI TEKNIK ATAU METODE YANG DITERAPKAN BECK DAN JEFFRIES PADA C3 PROJECT. TEKNIK-TEKNIK TERSEBUT ANTARA LAIN:
  1. Whole Team = Seluruh kontributor dalam proyek yang menggunakan pendekatan XP duduk bersama sebagai suatu tim. Tim ini terdiri beberapa peran, antara lain programmer, penguji,orang yang mengerti bisnis, analis, manajer, dan lain-lain. Setiap peran yang ada tidak mutlak menjadi peran dari satu orang saja. Tim terbaik dalam XP tidak harus memiliki pakar, hanya kontributor umum dengan keterampilan khusus saja. Semua orang di tim XP memberikan kontribusi dengan cara apapun yang mereka dapat lakukan.
  2. Planning game = Perencanaan dalam XP mengemukakan dua pertanyaan kunci dalam pengembangan perangkat lunak, yaitu  memprediksi apa yang akan dicapai pada waktu tertentu, dan menentukan apa yang harus dilakukan setelah itu. Ada dua langkah kunci dalam perencanaan XP, yang menangani dua pertanyaan tersebut:
    - Release Planning, yaitu praktek dimana Customer mengutarakan fitur yang diinginkannya ke programer, dan programer memperkirakan tingkat kesulitannya. Dengan estimasi biaya di tangan, dan dengan pengetahuan tentang pentingnya fitur yang diinginkan, Pelanggan meletakkan satu rencana untuk proyek tersebut. Rencana rilis awal yang selalu tepat: baik prioritas maupun perkiraan yang benar-benar solid, dan sampai tim mulai bekerja, kita tidak akan tahu seberapa cepat mereka akan pergi. Bahkan rencana rilis pertama cukup akurat untuk pengambilan keputusan, namun, dan tim XP melakukan revisi terhadap rencana rilis secara teratur.2. Iteration Planning adalah praktek di mana tim diberikan petunjuk atau arahan setiap beberapa minggu sekali. Tim XP membangun perangkat lunak dalam “iterasi” dua minggu, memberikan menjalankan perangkat lunak yang berguna pada setiap akhir iterasi. Selama Iteration Planning, Customer mengutarakan fitur yang diinginkan selama dua minggu ke depan. Para programer memecahnya ke dalam pekerjaan yang lebih kecil, dan memperkirakan biaya yang diperlukan.
    - Customer Tests, Sebagai bagian dari presentasi masing-masing fitur yang diinginkan, Customer XP mendefinisikan satu atau lebih  tes penerimaan otomatis untuk menunjukkan bahwa fitur tersebut bekerja dengan baik. Tim membangun tes ini dan menggunakannya untuk membuktikan pada kepada Customer bahwa fitur ini telah diimplementasikan dengan benar. Tes secara otomatis ini penting karena dalam XP hanya diberikan waktu yang singkat sehingga tes manual tidak akan digunakan karena memakan waktu yang lama.
    - Small Release, Pada setiap Iterasi, tim mengerjakan sebuah unit atau bagian dari perangkat lunak, melakukan tes terhadap unit perangkat lunak yang dibangun, kemudian di akhir iterasi perangkat lunak yang dibangun diberikan kepada Customer. Oleh customer, perangkat lunak ini bisa dijadikan bahan evaluasi maupun langsung dirilis kepada end user. Bisa juga tim XP langsung merilis ke end user secara rutin.
    - Simple Design, Tim XP membangun perangkat lunak dengan desain yang sederhana. Dimulai dengan desain yang sederhana, kemudian melalui pengujian program dan perbaikan desain. Desain yang dibuat harus benar-benar cocok untuk fungsi saat ini dari sistem sehingga tidak ada yang sia-sia dan perangkat lunak siap dikembangkan lagi selanjutnya. Namun, pembuatan desain dalam XP tidak dilakukan hanya sekali. Tahapan desain dalam Extreme Programming yang menghasilkan desain yang bagus dianggap sangat penting, sehingga selama proses development banyak difokuskan ke tahapan desain.
    - Pair Programming, Semua perangkat lunak yang dibangun dengan pendekatan XP dibangun oleh dua orang programmer. Keduanya duduk berdampingan di satu komputer yang sama. Seorang programmer akan membuat code dan programmer yang lainnya akan mengoreksinya. Praktik seperti ini mungkin kelihatan tidak efisien. Namun dari segi hasil dari pair programming, desain akan lebih baik, pengujian lebih baik, dan code yang dihasilkan pun akan lebih baik.
    - Test-Driven Development, Test-Driven Development bergantung pada pengulangan siklus development yang sangat pendek. Pertama tim XP akan menuliskan automated test case yang mendefinisikan perbaikan yang diinginkan atau fungsi baru. Kemudian dari test case tersebut dihasilkan jumlah minimal code yang harus dituliskan untuk lulus tes tersebut. Setelah itu melakukan refactoring code baru agar memenuhi standar baru.
    - Design Improvement, XP berfokus pada memberikan nilai bisnis dalam setiap perulangan. Agar dapat mencapai tujuan tersebut selama proyek berlangsung, perangkat lunak harus dirancang dengan baik. XP menggunakan proses perbaikan desain secara terus menerus dengan Refactoring. Proses refactoring berfokus pada penghapusan duplikasi dari code yang telah dibuat. Disamping itu, proses refactoring didukung dengan pengujian yang komprehensif utnuk memastikan bahwa desain yang dibuat berkembang dan tiidak ada yang rusak.
    - Continuous Integration, tim XP akan menggabungkan seluruh salinan pekerjaan tim menjadi satu dalam jaringan utama. Sehingga tim XP harus menjaga tim agar terintegrasi setiap saat.
    - Collective Code Ownership, Semua code yang ada dimiliki secara kolektif oleh tim. Manfaatnya setiap code akan mendapat perhatian dari banyak orang, sehingga dapat meningkatkan kualitas code dan mengurangi cacat. Selain itu dapat mengurangi duplikasi code yang sama walaupun dibuat oleh pasangan programmer yang berbeda.
    - Coding Standard, Setiap anggota tim XP harus mengikuti standar coding yang umum, sehingga semua code dalam sistem seolah-olah tampak dibuat oleh satu orang yang sangat kompeten. Selain itu hal ini sangat mendukung Collective Code Ownership.
    - Metaphor, Tim XP akan membuat suatu deskripsi umum bagaimana program yang mereka kembangkan bekerja dengan benar.
    - Sustainable Pace, Tim XP akan bekerjasama dalam jangka waktu lama. Mereka bekerja keras dengan kecepatan tertentu tanpa batas waktu. Tim XP akan bekerja lembur pada hari efektif dan memaksimalkan produktivitas setiap minggunya.  Hal ini perlu diperhatikan dengan baik, karena akan mengurangi produktivitas atau sebaliknya menghasilkan perangkat lunak yang berkualitas.
